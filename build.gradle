buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
//    id 'idea'
//    id 'net.neoforged.gradle.userdev' version '7.0.80'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

jarJar.enable()

version = mod_version
group = mod_group_id
base.archivesName = mod_id

java {
    archivesBaseName = 'dynamicportals'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

//configurations {
//    modImpl {}
//    implementation.extendsFrom modImpl
//}

dependencies {
//    compileOnly "curse.maven:spark-361579:4950608"
    implementation fg.deobf("com.tracky:tracky:3.0") {
        transitive(false)
    }
}

minecraft {
    mappings channel: 'parchment', version: "${mcMap}-${mapVer}-${minecraft_version}"

//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
//        configureEach {
//            systemProperty 'forge.logging.markers', 'REGISTRIES'
//            systemProperty 'forge.logging.console.level', 'debug'
//            modSource project.sourceSets.main
//        }

        client {
            workingDirectory project.file('runs/client')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                dynamicportals {
                    source sourceSets.main
                }
            }

//            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
//            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
//            programArgument '--nogui'

            workingDirectory project.file('runs/server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                dynamicportals {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "dynamicportals.refmap.json"
    config "dynamicportals.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url "https://www.cursemaven.com" }
    flatDir {
        dirs 'libs'
    }
    mavenLocal()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20-46.0.14'

//    jarJar("tracky:tracky:[3.0,)") {
//        transitive(false)
//        jarJar.pin(it, "3.0")
//    }

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "dynamicportals",
                "Specification-Vendor"    : "GiantLuigi4",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "GiantLuigi4",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
